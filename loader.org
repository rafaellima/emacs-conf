#+TITLE: My GNU Emacs configuration
#+STARTUP: indent
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamps:t
#+LAYOUT: post
#+DESCRIPTION: Loading emacs configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing

* Introduction

This is my version of an configuration file for GNU Emacs. I have been using GNU Emacs since 2015 when I was introduced to it by a colleague.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Rafael Lima")
#+END_SRC

* A secure Emacs environment

Great article why [[https://glyph.twistedmatrix.com/2015/11/editor-malware.html][Your editor is malware]]. The following basically sets up the configuration to adhere to the articles recommondations.

Fix MACOS certificate issue gnutils

#+BEGIN_SRC shell :exports none
(require 'gnutls)
(add-to-list 'gnutls-trustfiles "/usr/local/etc/openssl/cert.pem")
#+END_SRC

* Installing use-package
** Setup

GNU Emacs has a lot of packages that make things very easy for the
user. The package management infrastructure makes it a breeze to
install new packages and keep up-to-date with their development.

There are several package archives available for GNU Emacs:

- GNU
- Marmalade
- Melpa

Each archive will write its files in a seperate archive directory.

#+BEGIN_SRC emacs-lisp
  (require 'package)
#+END_SRC

Because the default setting for package-archives is to use the HTTP access to the GNU archive, I set the variable to `nil` before adding the HTTPS variants.

#+name: credmp-package-infrastructure
#+begin_src emacs-lisp

  (defvar gnu '("gnu" . "https://elpa.gnu.org/packages/"))
  (defvar melpa '("melpa" . "https://melpa.org/packages/"))
  (defvar melpa-stable '("melpa-stable" . "https://stable.melpa.org/packages/"))

  ;; Add marmalade to package repos
  (setq package-archives nil)
  (add-to-list 'package-archives melpa-stable t)
  (add-to-list 'package-archives melpa t)
  (add-to-list 'package-archives gnu t)
#+end_src

Initialize the archive and refresh the contents in case there is no cached archive.

#+BEGIN_SRC emacs-lisp
  (package-initialize)

  (unless (and (file-exists-p (concat init-dir "elpa/archives/gnu"))
               (file-exists-p (concat init-dir "elpa/archives/melpa"))
               (file-exists-p (concat init-dir "elpa/archives/melpa-stable")))
    (package-refresh-contents))
#+END_SRC

At each load the package list will be evaluated and any missing
packages will be installed. The packages-install function deals with
this check and takes care of any loading of the packages.

#+name: credmp-package-installer
#+begin_src emacs-lisp
(defun packages-install (&rest packages)
  (message "running packages-install")
  (mapc (lambda (package)
          (let ((name (car package))
                (repo (cdr package)))
            (when (not (package-installed-p name))
              (let ((package-archives (list repo)))
                (when (< emacs-major-version 27)
                  (package-initialize))
                (package-install name)))))
        packages)
  (when (< emacs-major-version 27)
    (package-initialize))
  (delete-other-windows))
#+end_src

** The package

#+name: credmp-package-installer
#+begin_src emacs-lisp
  ;; Install extensions if they're missing
  (defun init--install-packages ()
    (message "Lets install some packages")
    (packages-install
     ;; Since use-package this is the only entry here
     ;; ALWAYS try to use use-package!
     (cons 'use-package melpa)
     ))

  (condition-case nil
      (init--install-packages)
    (error
     (package-refresh-contents)
     (init--install-packages)))
#+end_src

* Installing try-package
** Setup
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

* Dashboard

#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
#+END_SRC

Customization
#+BEGIN_SRC emacs-lisp
(setq dashboard-center-content t)

(setq dashboard-items '((projects  . 5)
                        (bookmarks . 5)
                        (recents . 5)
                        (agenda . 5)
                        (registers . 5)))

(setq dashboard-set-heading-icons t)
(setq dashboard-set-file-icons t)

(setq dashboard-set-navigator t)

(setq dashboard-set-init-info t)

(add-to-list 'dashboard-items '(agenda) t)
#+END_SRC

* Moving around

Tabs vs Spaces

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

Rotate - Good for switching windows when purpose is not active

#+BEGIN_SRC emacs-lisp
  (use-package rotate
    :ensure t
    :bind (("C-c pw" . rotate-window)))
#+END_SRC

iedit - edit one occurance of some text in a buffer or region

#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t
    :bind (("C-c -;" . iedit-mode)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-x" . counsel-M-x)
     ("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

   (use-package swiper
     :pin melpa-stable
     :diminish ivy-mode
     :ensure t
     :bind*
     (("C-s" . swiper)
      ("C-c C-r" . ivy-resume)
      ("C-x C-f" . counsel-find-file)
      ("C-c h f" . counsel-describe-function)
      ("C-c h v" . counsel-describe-variable)
      ("C-c i u" . counsel-unicode-char)
      ("M-i" . counsel-imenu)
      ("C-c g" . counsel-git)
      ("C-c j" . counsel-git-grep)
      ("C-c k" . counsel-ag)
      ("C-c l" . scounsel-locate))
     :config
     (progn
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (define-key read-expression-map (kbd "C-r") #'counsel-expression-history)
       (ivy-set-actions
	'counsel-find-file
	'(("d" (lambda (x) (delete-file (expand-file-name x)))
           "delete"
           )))
       (ivy-set-actions
	'ivy-switch-buffer
	'(("k"
           (lambda (x)
             (kill-buffer x)
             (ivy--reset-state ivy-last))
           "kill")
          ("j"
           ivy--switch-buffer-other-window-action
           "other window")))))

(use-package counsel-projectile
  :ensure t
  :config
  (counsel-projectile-mode))

  (use-package ivy-hydra :ensure t)
#+END_SRC

Projectile settings

#+begin_src emacs-lisp
(projectile-global-mode)
(setq projectile-enable-caching t)
#+end_src

Counsel-projectile shortcuts

#+begin_src emacs-lisp
(global-set-key (kbd "C-c p f") 'counsel-projectile-find-file)
(global-set-key (kbd "C-c p d") 'counsel-projectile-find-dir)
(global-set-key (kbd "C-c p b") 'counsel-projectile-switch-to-buffer)
(global-set-key (kbd "C-c p s") 'projectile-grep)
(global-set-key (kbd "C-c p p") 'counsel-projectile-switch-project)
(global-set-key (kbd "C-c p i") 'projectile-invalidate-cache)
#+end_src

* Discover-ability

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
    (which-key-mode))
#+END_SRC

* Environment

#+name: starter-kit-osX-workaround
#+begin_src emacs-lisp
  (if (or
       (eq system-type 'darwin)
       (eq system-type 'berkeley-unix))
      (setq system-name (car (split-string system-name "\\."))))

  (setenv "PATH" (concat "/usr/local/bin:" (getenv "PATH")))
  (push "/usr/local/bin" exec-path)

  ;; /usr/libexec/java_home
  ;;(setenv "JAVA_HOME" "/Library/Java/JavaVirtualMachines/jdk1.8.0_05.jdk/Contents/Home")
#+end_src

** GUI

- Purpose

#+begin_src emacs-lisp
(use-package window-purpose
  :ensure t
  :config
  (purpose-mode))

(add-to-list 'purpose-user-mode-purposes '(ruby-mode . ru))
(add-to-list 'purpose-user-mode-purposes '(magit-mode . git))
(add-to-list 'purpose-user-mode-purposes '(org-mode . org))
(add-to-list 'purpose-user-mode-purposes '(rspec-mode . rspec))
(purpose-compile-user-configuration)
#+end_src

- Ace window
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t)

  (global-set-key (kbd "C-x o") 'ace-window)
#+end_src

* Look and feel
** all the icons

We need to run all-the-icons-install-fonts as well
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)
#+END_SRC

** mode-line
*** Doom modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode))
#+END_SRC


** Tweak window chrome

I don't usually use the menu or scroll bar, and they take up useful space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (when window-system
    (scroll-bar-mode -1))
#+END_SRC

The default frame title isn't useful. This binds it to the name of the current
project:

#+BEGIN_SRC emacs-lisp
  (setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC


** Use fancy lambdas

Why not?

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC


** Custom theme

Simple script to load desired theme on startup

#+BEGIN_SRC emacs-lisp
(when (window-system)
  (use-package doom-themes
    :config
    (load-theme 'doom-one t)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

    (set-face-attribute 'default nil :font "Hack-15")
  )
#+END_SRC


** Disable visual bell

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC


** Highlight the current line

=global-hl-line-mode= softly highlights the background color of the line
containing point. It makes it a bit easier to find point, and it's useful when
pairing or presenting code.

#+BEGIN_SRC emacs-lisp
  (when window-system
    (global-hl-line-mode))
#+END_SRC


** Hide certain modes from the modeline

I'd rather have only a few necessary mode identifiers on my modeline. This
either hides or "renames" a variety of major or minor modes using the =diminish=
package.

#+BEGIN_SRC emacs-lisp
  (defmacro diminish-minor-mode (filename mode &optional abbrev)
    `(eval-after-load (symbol-name ,filename)
       '(diminish ,mode ,abbrev)))

  (defmacro diminish-major-mode (mode-hook abbrev)
    `(add-hook ,mode-hook
               (lambda () (setq mode-name ,abbrev))))

  (diminish-minor-mode 'abbrev 'abbrev-mode)
  (diminish-minor-mode 'simple 'auto-fill-function)
  (diminish-minor-mode 'company 'company-mode)
  (diminish-minor-mode 'flycheck 'flycheck-mode)
  (diminish-minor-mode 'flyspell 'flyspell-mode)
  (diminish-minor-mode 'global-whitespace 'global-whitespace-mode)
  (diminish-minor-mode 'projectile 'projectile-mode)
  (diminish-minor-mode 'ruby-end 'ruby-end-mode)
  (diminish-minor-mode 'subword 'subword-mode)
  (diminish-minor-mode 'undo-tree 'undo-tree-mode)
  (diminish-minor-mode 'yard-mode 'yard-mode)
  (diminish-minor-mode 'yasnippet 'yas-minor-mode)
  (diminish-minor-mode 'wrap-region 'wrap-region-mode)

  (diminish-minor-mode 'paredit 'paredit-mode " π")

  (diminish-major-mode 'emacs-lisp-mode-hook "el")
  (diminish-major-mode 'haskell-mode-hook "λ=")
  (diminish-major-mode 'lisp-interaction-mode-hook "λ")
  (diminish-major-mode 'python-mode-hook "Py")
#+END_SRC


** Fullscreen
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC


** Line number

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC

* Programming
** General programming
*** Look and feel

Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :ensure t)
#+END_SRC

Enable the prettify symbols mode. It will translate (fn) to the lambda
sign.

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode 1)
#+END_SRC

Remove trailing whitespace

#+BEGIN_SRC emacs-lisp
(use-package simple
  :ensure nil
  :hook (before-save . delete-trailing-whitespace))
#+END_SRC

*** Version Control
Magit is the only thing you need when it comes to Version Control (Git)

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c m s" . magit-status)))
#+END_SRC

*** Utils

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t)
#+END_SRC

** Elixir

#+begin_src emacs-lisp
  (use-package elixir-mode
    :ensure t)
  (use-package alchemist
    :ensure t)
#+end_src

Use smartparens to add `end` as soon as you finish to type in the `do` keyword

#+begin_src emacs-lisp
(require 'smartparens)

(defun my-elixir-do-end-close-action (id action context)
  (when (eq action 'insert)
    (newline-and-indent)
    (previous-line)
    (indent-according-to-mode)))

(sp-with-modes '(elixir-mode)
  (sp-local-pair "do" "end"
         :when '(("SPC" "RET"))
         :post-handlers '(:add my-elixir-do-end-close-action)
         :actions '(insert)))
#+end_src

** Ruby

*** Rspec

#+BEGIN_SRC emacs-lisp
(use-package rspec-mode
  :ensure t)
#+END_SRC

#+begin_src emacs-lisp
(require 'rspec-mode)

(setq ruby-insert-encoding-magic-comment nil)
#+end_src


*** Smartparens
Configuring smartparens for ruby

#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t)

(smartparens-global-mode)

  (sp-with-modes '(ruby-mode)
    (sp-local-pair "do" "end"
                 :when '(("SPC" "RET"))
                 :post-handlers '(sp-ruby-def-post-handler)
                 :actions '(insert navigate)))
#+end_src

** Go

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :defer  2
  :config
  (dolist (var '("GOPATH"  "NVM_BIN"))
    (add-to-list 'exec-path-from-shell-variables var))
  (exec-path-from-shell-initialize))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package go-autocomplete
    :ensure t)

  (require 'go-autocomplete)
  (require 'auto-complete-config)
  (ac-config-default)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :ensure t
  :commands (lsp lsp-deferred)
  :hook (go-mode . lsp-deferred))

;; Set up before-save hooks to format buffer and add/delete imports.
;; Make sure you don't have other gofmt/goimports hooks enabled.
(defun lsp-go-install-save-hooks ()
  (add-hook 'before-save-hook #'lsp-format-buffer t t)
  (add-hook 'before-save-hook #'lsp-organize-imports t t))
(add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

(setq gofmt-command "goimports")
(add-hook 'before-save-hook 'gofmt-before-save)

;; Optional - provides fancier overlays.
(use-package lsp-ui
  :ensure t
  :commands lsp-ui-mode)

;; Company mode is a standard completion package that works well with lsp-mode.
(use-package company
  :ensure t
  :config
  ;; Optionally enable completion-as-you-type behavior.
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 1))

;; company-lsp integrates company mode completion with lsp-mode.
;; completion-at-point also works out of the box but doesn't support snippets.
(use-package company-lsp
  :ensure t
  :commands company-lsp)

(use-package yasnippet
  :ensure t
  :commands yas-minor-mode
  :hook (go-mode . yas-minor-mode))

(use-package flycheck
  :ensure t
  :commands flycheck-mode
  :hook (go-mode . flycheck-mode))

(setq-default
  tab-width 4
  standard-indent 4)
#+END_SRC

# #+BEGIN_SRC emacs-lisp
# (use-package gotest
#   :ensure t)

# (define-key go-mode-map (kbd "C-x f") 'go-test-current-file)
# (define-key go-mode-map (kbd "C-x t") 'go-test-current-test)
# (define-key go-mode-map (kbd "C-x p") 'go-test-current-project)
# (define-key go-mode-map (kbd "C-x b") 'go-test-current-benchmark)
# (define-key go-mode-map (kbd "C-x x") 'go-run)
# #+END_SRC

** Plugins
*** Ace jump
Help move the cursor within Emacs

#+begin_src emacs-lisp
  (use-package ace-jump-mode
    :ensure t
    :bind ("C-c s" . 'ace-jump-mode))
#+end_src

*** Flycheck

 #+begin_src emacs-lisp
 (use-package flycheck
  :ensure t)
 #+end_src

*** Undo-tree
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t)

(global-undo-tree-mode)
#+END_SRC
** Groovy

Setting up groovy (mostly for Jenkins)

#+begin_src emacs-lisp
  (use-package groovy-mode
    :ensure t)
#+end_src

#+begin_src emacs-lisp
  (use-package groovy-mode
     :mode ("\\.g\\(?:ant\\|roovy\\|radle\\)\\'" "Jenkinsfile")
     :init
     (setq groovy-indent-offset 2))
#+end_src

#+begin_src emacs-lisp
  (use-package jenkins
    :ensure t)
#+end_src

* Org
*** Org-mode

org-bullets-mode

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t)
#+END_SRC

Org-mode installation

#+BEGIN_SRC emacs_lisp
(use-package org-mode
  :ensure t
  :config (org-bullets-mode 1))
#+END_SRC

Add org-mode custom configuration

#+begin_src emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "IN PROGRESS(i)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("IN PROGRESS" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold))))
#+end_src

#+BEGIN_SRC
(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)
   (ruby .)))
#+END_SRC
